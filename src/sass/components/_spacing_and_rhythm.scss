// Margins/Spacing:
// Add space “between relationships” not "to elements". so as to: reduce code, make styling more flexible, make spacing even by not leaving space “hanging” causing doubles/conflicts.
// By using i) margin-top; ii) only on * + * items; and iii) padding the container, this also removes the need for overflow: auto to show coloured backgrounds.
// Ref: Heydon Pickering and Andy Bell
// https://24ways.org/2018/managing-flow-and-rhythm-with-css-custom-properties/
// http://alistapart.com/article/axiomatic-css-and-lobotomized-owls/

:root {
  --flow-space: #{$body-line-height-min}rem;
}

@mixin stack() {
  //--flow-space: #{$body-line-height-min}rem;

  & > * + * {
    margin-top: $body-line-height-min+rem;
    margin-top: var(--flow-space);
  }
}

// Use sparingly; only when we know exactly what the inner content will be
@mixin stack_recursive() {
  //--flow-space: #{$body-line-height-min}rem;

  & * + * {
    margin-top: $body-line-height-min+em;
    margin-top: var(--flow-space);
  }
}

.stack,
main,
.container,
.prose,
.entry-header,
.entry-content,
form,
.a11y-modal > * {
  //--flow-space: #{$body-line-height-min}rem;
  @include stack();
}

.trio {
  //--flow-space: #{$body-line-height-min}rem;
  @include stack_recursive();
}

main {
  padding-top: var(--flow-space);
  padding-bottom: var(--flow-space);
}



/** + * {
  margin-top: 1.5em;
}

.compact * + * {
  margin-top: 0.75em;
}

.flow-margins-off > * {
  margin-top: 0;
}

.text-icon-pair > * {
  margin-top: 0;
}*/

