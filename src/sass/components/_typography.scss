///////////////////////////////////
// Chosen Typefaces
///////////////////////////////////

$base-font-family: Helvetica Neue,sans-serif;
$base-font-family-fonts-loaded: Source Sans Pro,Helvetica Neue,sans-serif;

$alt-font-family: serif;
$alt-font-family-fonts-loaded: Source Serif Pro, serif;


// @font-face declarations (if self-hosting)

@font-face {
  font-family: Source Sans Pro;
  src: url(/assets/type/SourceSansPro-LightIt.ttf.woff2) format("woff2"),
       url(/assets/type/SourceSansPro-LightIt.ttf.woff) format("woff"),
       url(/assets/type/SourceSansPro-LightIt.otf) format("opentype");
  font-style: italic;
  font-display: swap;
}

@font-face {
  font-family: Source Sans Pro;
  src: url(/assets/type/SourceSansPro-Light.ttf.woff2) format("woff2"),
       url(/assets/type/SourceSansPro-Light.ttf.woff) format("woff"),
       url(/assets/type/SourceSansPro-Light.otf) format("opentype");
  font-display: swap;
}

@font-face {
  font-family: Source Sans Pro;
  src: url(/assets/type/SourceSansPro-Semibold.ttf.woff2) format("woff2"),
       url(/assets/type/SourceSansPro-Semibold.ttf.woff) format("woff"),
       url(/assets/type/SourceSansPro-Semibold.otf) format("opentype");
  font-weight:700;
  font-display: swap;
}

@font-face {
  font-family: Source Serif Pro;
  src: url(/assets/type/SourceSerifPro-Regular.ttf.woff2) format("woff2"),
       url(/assets/type/SourceSerifPro-Regular.ttf.woff) format("woff"),
       url(/assets/type/SourceSerifPro-Regular.otf) format("opentype");
  font-weight: 500;
  font-display: swap;
}




///////////////////////////////////
// Sizing (parts 1 and 2)
///////////////////////////////////

// Part 1: Work out a familar, good base size as follows:
// 1) Get x-height of your typeface (e.g. 0.480) by forking this x-height tool https://codepen.io/timbrown/pen/VrbWNx like this https://codepen.io/fuzzylogicx/pen/QPKNjV
// 2) Get its "reciprocal" using (1/$xheight) e.g. 1/0.480 = 2.0833333333
// 3) Calculate a size range: multiply reciprocal by familiar "limits" (Times .419em, Verdana .579em). For example .8729166667em to 1.20625em.
// 4) Choose a value in between e.g. 1.04 (based on (.8729166667 + 1.20625) / 2 = 1.0395833334). Or size up or down within our range based on gut instinct.

$ms-base: 1.125; // aka 18px. Tip: avoid sub-pixel base font size (at least if also using for input font-size) because causes Safari to botch input bottom-borders.

// Part 2: Generate a modular scale (ms) based on our chosen font-size and a sensible ratio (for example 5:6 (1.2), the minor third)
// Use https://www.modularscale.com/ and set to appropriate base font-size and ratio.
// Sofrito modular scale: https://www.modularscale.com/?1.1&em&1.2

$ms-ratio: 1.2;

@function scale-value($step-number) {
  @if $step-number == 0 {
    @return 1;
  }
  @return pow($ms-ratio, $step-number);
}
//@debug scale-value(-2);




///////////////////////////////////
// Measure
///////////////////////////////////

// arrived at by trying em-based values for max-width and min-width in browser and deciding what’s best by eye
$text-measure-min-in-ems: 18;
$text-measure-max-in-ems: 34;

// media query friendly equivalent of our max measure width
// (note media queries work on 1em = 16px hence the required calculation when our 1em != 16px)
$width-pressure-point-one: ($text-measure-max-in-ems * $ms-base)+em;




///////////////////////////////////
// Leading
///////////////////////////////////

// previously used aribitrary/eye-balled numbers like 1.4 and 1.5...
// but since that model is quite inflexible to apply across all the site’s elements, we’re just as well picking line-height values from the scale throughout the site.
// Start with ones for standard body copy.

$body-line-height-min: scale-value(-6) * 4; // 1.33959 (i.e. 1.34)
$body-line-height-max: scale-value(2);




///////////////////////////////////
// Gutter
///////////////////////////////////

$min-acceptable-gutter_in_vw: 4.89; // Using vw for main gutter has the advantage of gutter width scaling with viewport width.




//////////////////////////////////////////////////////////////////////////////////////
// Responsive breakpoints
// defined here because:
// i) they’re set in ems so relative to type size; and
// ii) we can now use them in rules below e.g. for increasing h1 size on large screens
//////////////////////////////////////////////////////////////////////////////////////

// Max-width we want our site's content to go.
// NB this is not the same as our $text-measure. This is for an outer wrapper.
// ...


// Breakpoint values
// Note that media queries work on 1em = 16px so if our root font-size is not 1em we need to:
// multiply the em-based target width/height for our media query by our root font-size (in ems) value.

$bp-wide-one: ( ($text-measure-max-in-ems + 2) * $ms-base)+em;




///////////////////////////////////
// Variables
///////////////////////////////////

// Set some vars we’ll use as utilities and in calculations

$ms-base-rem: ($ms-base * 1)+rem;
$ms-base-px: ($ms-base * 16px)+px;


$space-xxs: ($body-line-height-min/2)+rem;
$space-xs: scale-value(-1)+rem;
$space-s: 1rem;
$space-m: $body-line-height-min+rem;
$space-l: scale-value(3)+rem;




// Body Text

:root {
  color: $text-color;
  font-family: $base-font-family-fonts-loaded;
  font-size: $ms-base-rem;
}

//body{
//  font-family:Helvetica Neue,sans-serif;background:#fff;margin:0;color:#222
//}
//.fonts-loaded body{
//  font-family: $base-font-family-fonts-loaded;
//}

body {
  font-family: $base-font-family-fonts-loaded;
  line-height: $body-line-height-min; // set leading on body per Tim Brown rather than on html/root per normalize.css
  @include at-least($width-pressure-point-one) {
    line-height: $body-line-height-max;
  }
}


// Links

a {
  color: $color-accent;
}

a:hover {
  color: darken($color-accent, 25%);
}


// Links using fancy borders (and related considerations because any non-simple underline technique has foibles!)

.prose {

  a {
    text-decoration: none;
    color: $color-accent;
    background: linear-gradient($border-color, $border-color) no-repeat;
    background-size: 100% 1px;
    background-position: 0 1.15em;
    text-shadow: .05em 0 white, -.05em 0 white;
  }

  a:hover {
    background-image: linear-gradient($color-accent, $color-accent);
  }

}

@mixin block_anchor_underline_position_fix() {
  background-position: 0 1.2em;
}

@mixin anchor_remove_underline() {
  background: none;
  text-shadow: none;
}

// note that when <a>s are flex children (or for some other reason display: block / display: inline-block) the border appears too high
// let’s treat the most noticable issue – links with icons (because they might exist within flowing prose beside normal links)
 .special-link {
  @include block_anchor_underline_position_fix;
}




// Abbreviations
// from normalize.css: 1. Remove the bottom border in Chrome 57-; and 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.

abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  text-decoration: underline dotted; /* 2 */
}

// Bold / Emphasis
// from normalize.css: Add the correct font weight in Chrome, Edge, and Safari.

b,
strong {
  font-weight: bolder;
}

// Small Text (captions, labels, help text, or for use when screen real estate is limited, as in banner ads. But small text involves more than simply reducing the font size.)

small {
  font-size: scale-value(-2)+rem;
}

// From normalize.css: prevent `sub` and `sup` elements from affecting the line height in all browsers.

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

// Quoting

blockquote {
  border-left: 0.625em solid $border-color;
  color: lighten($text-color, 20%);
  font-style: italic;
  margin: scale-value(4)+rem 0;
  margin-left: -($space-l);
  padding-left: $space-s;
}

// Headings

h6,
h5,
h4,
h3,
h2,
h1 {
  margin: 0 0 $space-xxs;
}

h6,
h5,
h4 {
  font-weight: 700;
}

h3,
h2 {
  line-height: scale-value(1);
}

h3 {
  font-size: scale-value(0)+rem;
  font-weight: 700;

  // Add typographic "contrast".
  @include at-least($width-pressure-point-one) {
    font-size: scale-value(1)+rem;
  }

}

h2 {
  font-size: scale-value(1)+rem;
  font-weight: 700;

  // Add typographic "contrast".
  @include at-least($width-pressure-point-one) {
    font-size: scale-value(2)+rem;
  }

}

h1 {
  font-size: scale-value(2)+rem;

  // Add typographic "contrast".
  @include at-least($width-pressure-point-one) {
    font-size: ( scale-value(2) + scale-value(-6) )+rem;
  }

  font-weight: 700;
  line-height: 1;
  margin-top: $space-s;
  margin-bottom: $space-s;
  color: $color-accent;
}

ol, ul, li {
  margin-top: 0;
  padding-top: 0;
}

p,
ul,
details {
  margin-bottom: $space-xxs;
}

.prose {
  hyphens: auto;
  font-feature-settings: "kern", "liga", "clig", "calt", "onum", "pnum";
}

@supports (font-kerning: normal) and (font-variant-ligatures: common-ligatures contextual) and (font-variant-numeric: oldstyle-nums proportional-nums) {
  .prose {
    font-kerning: normal;
    font-variant-ligatures: common-ligatures contextual;
    font-variant-numeric: oldstyle-nums proportional-nums;
    font-feature-settings: normal;
  }
}




// Featured Text
// Display Text (top-level headings, hero text, and logotype lockups)
// Signage & UI (website navigation, footers full of links, labels in a grid of products, previous and next links, buttons, and strong calls to action)
// Tabular Data
// Technical Accuracy (In code, symbols and their sequence are critical. The same goes for math, which can include complex glyph placement. Poetry, screenplays, and infographics)
// Ads
