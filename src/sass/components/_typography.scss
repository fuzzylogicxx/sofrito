///////////////////////////////////
// Chosen Typefaces
///////////////////////////////////

$base-font-family: Helvetica Neue, sans-serif;
$base-font-family-fonts-loaded: 'Source Sans Pro', Helvetica Neue, sans-serif;

$alt-font-family: serif;
$alt-font-family-fonts-loaded: 'Source Serif Pro', serif;




// @font-face declarations (if self-hosting)
// Note re. performance and method of delivery:
// If your font could be hosted either i) locally; or ii) by Google Fonts; or iii) by Adobe Fonts, as is the case with Source Sans Pro…
// Then self-hosting and Google Fonts are the better-performing options.
// Google Fonts has the advantage of using a CDN so the font would be delivered from a location closer to the user, therefore faster.
// But as far as I can tell it doesn’t offer all the typographic detail (OpenType features such as numerals) that I’d like.
// So my preference is to self-host my static assets for full control, then ideally also get the performance gains of a CDN by using e.g. CloudFlare.
// Refs:
// https://www.keycdn.com/blog/web-font-performance
// https://csswizardry.com/2019/05/self-host-your-static-assets/

// Main Font: Source Sans Pro (https://github.com/adobe-fonts/source-sans-pro)
// Note: to reduce file size I could subset the original .ttf file of each weight I’m using.
// At least should be doing that on non-body fonts (headings, code) which don’t need wide-ranging features.
// First approach is to use Filament Group’s node-based CLI tool https://github.com/filamentgroup/glyphhanger.
// Alternatively CLI tool pyftsubset (https://github.com/fonttools/fonttools) however glyphhanger is easier.
// Alternatively FontSquirrel (https://www.fontsquirrel.com/tools/webfont-generator) offers a GUI but I don’t like/understand all the options.


// Sans: Regular (activated by font-weight: 400)

@font-face {
  font-family: Source Sans Pro;
  src: url(../type/sans/SourceSansPro-Regular.ttf.woff2) format("woff2"),
       url(../type/sans/SourceSansPro-Regular.otf.woff) format("woff"),
       url(../type/sans/SourceSansPro-Regular.otf) format("opentype");
  font-weight: 400;
  font-display: swap;
}

// Sans: Regular Italic (activated by font-weight: 400 and font-style: italic)

@font-face {
  font-family: Source Sans Pro;
  src: url(../type/sans/SourceSansPro-It.ttf.woff2) format("woff2"),
       url(../type/sans/SourceSansPro-It.otf.woff) format("woff"),
       url(../type/sans/SourceSansPro-It.otf) format("opentype");
  font-weight: 400;
  font-style: italic;
  font-display: swap;
}

// Sans: Bold (activated by font-weight: 700)

@font-face {
  font-family: Source Sans Pro;
  src: url(../type/sans/SourceSansPro-Bold.ttf.woff2) format("woff2"),
       url(../type/sans/SourceSansPro-Bold.otf.woff) format("woff"),
       url(../type/sans/SourceSansPro-Bold.otf) format("opentype");
  font-weight: 700;
  font-display: swap;
}

/*// Sans: Light (activated by font-weight: 300)

@font-face {
  font-family: Source Sans Pro;
  src: url(../type/SourceSansPro-Light.ttf.woff2) format("woff2"),
       url(../type/SourceSansPro-Light.ttf.woff) format("woff"),
       url(../type/SourceSansPro-Light.otf) format("opentype");
  font-weight: 300;
  font-display: swap;
}

// Sans: Semibold (activated by font-weight: 700)

@font-face {
  font-family: Source Sans Pro;
  src: url(../type/SourceSansPro-Semibold.ttf.woff2) format("woff2"),
       url(../type/SourceSansPro-Semibold.ttf.woff) format("woff"),
       url(../type/SourceSansPro-Semibold.otf) format("opentype");
  font-weight: 700;
  font-display: swap;
}


*/



///////////////////////////////////
// Sizing (parts 1 and 2)
///////////////////////////////////

// Part 1: Work out a familar, good base size as follows:
// 1) Get x-height of your typeface (e.g. 0.480) by forking this x-height tool https://codepen.io/timbrown/pen/VrbWNx like this https://codepen.io/fuzzylogicx/pen/QPKNjV
// 2) Get its "reciprocal" using (1/$xheight) e.g. 1/0.480 = 2.0833333333
// 3) Calculate a size range: multiply reciprocal by familiar "limits" (Times .419em, Verdana .579em). For example .8729166667em to 1.20625em.
// 4) Choose a value in between e.g. 1.04 (based on (.8729166667 + 1.20625) / 2 = 1.0395833334). Or size up or down within our range based on gut instinct.

$ms-base: 1.125; // aka 18px. Tip: avoid sub-pixel base font size (at least if also using for input font-size) because causes Safari to botch input bottom-borders.

// Part 2: Generate a modular scale (ms) based on our chosen font-size and a sensible ratio (for example 5:6 (1.2), the minor third)
// Use https://www.modularscale.com/ and set to appropriate base font-size and ratio.
// Sofrito modular scale: https://www.modularscale.com/?1.1&em&1.2

$ms-ratio: 1.2;

@function scale-value($step-number) {
  @if $step-number == 0 {
    @return 1;
  }
  @return pow($ms-ratio, $step-number);
}
//@debug scale-value(-2);




///////////////////////////////////
// Measure
///////////////////////////////////

// arrived at by trying em-based values for max-width and min-width in browser and deciding what’s best by eye
$text-measure-min-in-ems: 18;
$text-measure-max-in-ems: 34;

// media query friendly equivalent of our max measure width
// (note media queries work on 1em = 16px hence the required calculation when our 1em != 16px)
$width-pressure-point-one: ($text-measure-max-in-ems * $ms-base)+em;




///////////////////////////////////
// Leading
///////////////////////////////////

// previously used aribitrary/eye-balled numbers like 1.4 and 1.5...
// but since that model is quite inflexible to apply across all the site’s elements, we’re just as well picking line-height values from the scale throughout the site.
// Start with ones for standard body copy.

$body-line-height-min: scale-value(-6) * 4; // 1.33959 (i.e. 1.34)
$body-line-height-max: scale-value(2);




///////////////////////////////////
// Gutter
///////////////////////////////////

$min-acceptable-gutter_in_vw: 4.89; // Using vw for main gutter has the advantage of gutter width scaling with viewport width.




//////////////////////////////////////////////////////////////////////////////////////
// Responsive breakpoints
// defined here because:
// i) they’re set in ems so relative to type size; and
// ii) we can now use them in rules below e.g. for increasing h1 size on large screens
//////////////////////////////////////////////////////////////////////////////////////

// Max-width we want our site's content to go.
// NB this is not the same as our $text-measure. This is for an outer wrapper.
// ...


// Breakpoint values

$bp-wide-one: 48em; //( ($text-measure-max-in-ems + 2) * $ms-base)+em;

$bp-wide-two: 64em;

$bp-wide-three: 80em;

$bp-wide-four: 100em;

$bp-wide-five: 120em;




///////////////////////////////////
// Variables
///////////////////////////////////

// Set some vars we’ll use as utilities and in calculations

$ms-base-rem: ($ms-base * 1)+rem;
$ms-base-px: ($ms-base * 16px)+px;


$space-xxs: ($body-line-height-min/2)+rem;
$space-xs: scale-value(-1)+rem;
$space-s: 1rem;
$space-m: $body-line-height-min+rem;
$space-l: scale-value(3)+rem;




///////////////////////////////////
// Spacing and Rhythm
///////////////////////////////////

// Add space “between relationships” not "to elements". so as to: reduce code, make styling more flexible, make spacing even by not leaving space “hanging” causing doubles/conflicts.
// By using i) margin-top; ii) only on * + * items; and iii) padding the container, this also removes the need for overflow: auto to show coloured backgrounds.
// Ref: Heydon Pickering and Andy Bell
// https://24ways.org/2018/managing-flow-and-rhythm-with-css-custom-properties/
// http://alistapart.com/article/axiomatic-css-and-lobotomized-owls/

:root {
  --flow-space: 1rem; //--flow-space: #{$body-line-height-min/2}rem;
  /*@include at-least($width-pressure-point-one) {
    --flow-space: #{$body-line-height-max/2}rem;
  }*/
}

@mixin stack() {
  //--flow-space: #{$body-line-height-min}rem;

  & > * + * {
    margin-top: 1rem;
    margin-top: var(--flow-space);
  }
}

// Recursive Stack: use sparingly; only when we know exactly what the inner content will be
@mixin stack_recursive() {
  //--flow-space: #{$body-line-height-min}rem;

  & * + * {
    margin-top: 1rem;
    margin-top: var(--flow-space);
  }
}

.stack,
main,
.container,
.contain-prose,
.prose,
.entry-header,
.entry-content,
form,
.a11y-modal > * {
  @include stack();
}

$space-compact: ($body-line-height-min/2);

.stack-compact {
  --flow-space: #{$space-compact}rem;
  @include stack();
}

$space-spacious: $body-line-height-max;

.stack-spacious,
.global-footer {
  --flow-space: #{$space-spacious}rem;
  @include stack();
}

.stack-deactivate > * {
  margin-top: 0;
}





///////////////////////////////////
// Typographic Element Styles
///////////////////////////////////

// Body Text

:root {
  font-size: $ms-base-rem;
}

body {
  color: $text-color;

  // WebFont-loading. For now, keeping it CSS-based and simple, leveraging font-display where supported.
  // however this is non-optimal for old browsers. They will suffer from FOIT.
  // So I should choose and implement a strategy from https://github.com/zachleat/web-font-loading-recipes/ / https://www.zachleat.com/web/comprehensive-webfonts/
  // considering also Chris F’s article on font-loading and https://www.filamentgroup.com/lab/js-web-fonts.html
  // But for now:
  font-family: $base-font-family-fonts-loaded;

  // set leading on body per Tim Brown rather than on html/root per normalize.css
  line-height: $body-line-height-min;
  @include at-least($width-pressure-point-one) {
    line-height: $body-line-height-max;
  }
}



// Links

// Note 1: there are many new underline attributes coming. Keep an eye on https://codepen.io/jensimmons/pen/wLrjGG?editors=1100 to check support.
// Note 2: if base link styles become elaborate, consider applying them to a:not([class])

a {
  color: $color-accent;
  text-decoration: underline solid lighten($color-accent, 25%);
}

a:hover {
  color: darken($color-accent, 25%);
  text-decoration: underline solid darken($color-accent, 25%);
}


// Abbreviations
// from normalize.css: 1. Remove the bottom border in Chrome 57-; and 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.

abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  text-decoration: underline dotted; /* 2 */
}


// Bold / Emphasis
// from normalize.css: Add the correct font weight in Chrome, Edge, and Safari.

b,
strong {
  font-weight: bolder;
}


// Small Text (captions, labels, help text, or for use when screen real estate is limited, as in banner ads. But small text involves more than simply reducing the font size.)

small {
  font-size: scale-value(-2)+rem;
}


// From normalize.css: prevent `sub` and `sup` elements from affecting the line height in all browsers.

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}


// Quoting

blockquote {
  border-left: scale-value(-6)+rem solid $border-color;
  color: lighten($text-color, 20%);
  font-style: italic;
  margin-left: 0;
  padding-left: 1rem;

  /*margin: scale-value(4)+rem 0;
  margin-left: -($space-l);
  padding-left: $space-s;*/

}


// Headings

h6,
h5,
h4 {
  font-weight: 700;
}

.h4 {
  font-size: 1rem;
}

h3 {

  // Increase the margin-top.
  --flow-space: #{$space-l};

  font-weight: 700;

  // A font-size only just larger than the body font-size is a common requirement so let’s make one by adding scale values.
  font-size: ( (scale-value(-6) * 2) + scale-value(-5) )+rem;

  line-height: scale-value(1);

  // Add typographic "contrast".
  @include at-least($width-pressure-point-one) {
    font-size: scale-value(1)+rem;
  }

  .prose & {
    //margin-top: scale-value(4)+rem;
  }

}

h2 {

  // Increase the margin-top.
  --flow-space: #{$space-l};

  font-size: scale-value(1)+rem;
  font-weight: 700;

  // Tighter line-height. Just a little looser than "setting solid" works for this typeface.
  line-height: (scale-value(0) + ( (scale-value(-3)) - (scale-value(-4)) ));

  // Add typographic "contrast".
  @include at-least($width-pressure-point-one) {
    font-size: scale-value(2)+rem;
  }

  .prose & {
    //margin-top: scale-value(4)+rem;
  }
}

h1 {
  color: $color-accent;
  font-size: scale-value(2)+rem;

  // Add typographic "contrast".
  @include at-least($width-pressure-point-one) {
    font-size: ( scale-value(2) + scale-value(-6) )+rem;
  }

  font-weight: 700;
  line-height: 1;
  //margin-bottom: $space-s;
}

h3 + p,
h2 + p {
  --flow-space: #{scale-value(-6)}rem;
}

.prose {
  hyphens: auto;
  font-feature-settings: "kern", "liga", "clig", "calt", "onum", "pnum";
}

@supports (font-kerning: normal) and (font-variant-ligatures: common-ligatures contextual) and (font-variant-numeric: oldstyle-nums proportional-nums) {
  .prose {
    font-kerning: normal;
    font-variant-ligatures: common-ligatures contextual;
    font-variant-numeric: oldstyle-nums proportional-nums;
    font-feature-settings: normal;
  }
}




// Featured Text
// Display Text (top-level headings, hero text, and logotype lockups)
// Signage & UI (website navigation, footers full of links, labels in a grid of products, previous and next links, buttons, and strong calls to action)
// Tabular Data
// Technical Accuracy (In code, symbols and their sequence are critical. The same goes for math, which can include complex glyph placement. Poetry, screenplays, and infographics)
// Ads
