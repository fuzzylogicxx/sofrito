// Useful layout refs:
// https://noti.st/mbarker84/CkDXxM#sGZneIR
// https://css-tricks.com/snippets/css/complete-guide-grid/, http://grid.malven.co/, https://cssgrid-generator.netlify.com/


///////////////////////////////////
// Responsive utilities
///////////////////////////////////

// Container
// Use this to give wrappers a sensible maximum width.
// Defined as a mixin so it can be used in different places; not just via the .container class defined later.

@mixin container() {

  margin-left: $space-s;
  margin-right: $space-s;

  @include at-least($bp-wide-two) {
    margin-left: 2%;
    margin-right: 2%;
  }

  @include at-least($bp-wide-three) {
    margin-left: 6%;
    margin-right: 6%;
  }

  @include at-least($bp-wide-four) {
    margin-left: 10%;
    margin-right: 10%;
  }

  @include at-least($bp-wide-five) {
    margin-left: auto;
    margin-right: auto;
    max-width: 80em;
  }

}

.container {
  @include container();
}

.contain-prose {
  margin-left: $space-s;
  margin-right: $space-s;

  @include at-least($bp-wide-two) {
    margin-left: 2%;
    margin-right: 2%;
  }

  @include at-least($bp-wide-three) {
    margin-left: auto;
    margin-right: auto;
    max-width: $text-measure-max-in-ems+rem;
  }
}

.container-centred-text {
  text-align: center;

  & > * {
    max-width: $text-measure-max-in-ems+rem;

    // Add a little more breathing space on narrow screens
    margin-left: $space-s;
    margin-right: $space-s;

    // We need to centre our max-width-ed elements on wider screens
    @include at-least($width-pressure-point-one) {
      margin-left: auto;
      margin-right: auto;
    }
  }
}



// Create a grid with 3 flexible-width-but-always-equal-width colummns
// (and auto-rows? - test to confirm)

@mixin trio() {
  display: grid;
  grid-column-gap: $space-l;
  grid-template-columns: repeat(3, 1fr);
}

.trio {
  //--flow-space: #{$body-line-height-min}rem;
  @include stack();

  @include at-least($bp-wide-one) {
    @include trio();

    & > * {
      margin-top: 0;
    }
  }

  p {
    margin-top: ($body-line-height-min/2)+rem;
    @include at-least($width-pressure-point-one) {
      --flow-space: #{$body-line-height-max/2}rem;
    }
  }
}



// Create a row with 2 equal-width columns (using multi-column) but when space allows, 3 equal-width columns.

.min-duo-max-trio {
  columns: 2;
  @include at-least($bp-wide-one) {
    columns: unset;
    @include trio();
  }
}


// Component lists of flexible/unknown quantity with equal width items.
// To achieve wrapping, we can use the auto-fit or auto-fill keywords.
// auto-fill inserts empty columns to end of line if necessary
// auto-fit also inserts empty columns but collapses them so they donâ€™t take up space then allocates their space to the items.
// See https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/




// Create a grid that shows two across on narrow screens
// but on wider screens, auto-fits columns and rows (inserts empty columns to end of line if necessary)
// and never lets items get too wide, by virtue of using a vw-based column-gap
// Ref: https://www.sarasoueidan.com/work/
// Note: should test/decide whether grid or flexbox is best here

.flexible-list-component {
  list-style: none;
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 15vw;
}

@media (min-width: 50em) {
  .flexible-list-component {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    grid-gap: 7em 7vw;

    & > * {
      //outline: 1px solid red;
    }
  }

}



// A flexible grid suited to items that can be narrow. It increases the minimum width of items beyond a breakpoint.

.another-flexible-list-component {
    list-style: none;
    padding: 0;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    grid-gap: 3em;
}

@media (min-width: 56.25em) {
  .another-flexible-list-component {
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  }
}
