// Useful layout refs:
// https://noti.st/mbarker84/CkDXxM#sGZneIR
// https://css-tricks.com/snippets/css/complete-guide-grid/, http://grid.malven.co/, https://cssgrid-generator.netlify.com/

///////////////////////////////////
// Box
///////////////////////////////////

// Purpose: create a "visible box" which groups and demarcates some content.
// Use cases: i) a note/message to stand out among flow content; or ii) a card in a grid; or iii) inside a positioned alert.
// It should have:
// i) padding on all sides or none at all; and or
// ii) border on all sides or none at all; and or
// iii) a background colour with contrasting text colour. If there’s no border, add a transparent outline because high-contrast themes eliminate backgrounds.
// Ref: https://absolutely.every-layout.dev/layouts/box/

// Temp til decide where to put this var
:root {
  --border-thin: 1px;
}

.box {
  padding: $space-s;
  border: var(--border-thin) solid;
  --color-light: #eee;
  --color-dark: #222;
  background-color: var(--color-light);
  color: var(--color-dark);
}

.box.box-no-padding {
  padding: 0;
}

.box.box-no-border {
  border: none;
  outline: 0.125rem solid transparent;
  outline-offset: -0.125rem;
}

.box * {
  color: inherit;
}

.box.invert {
  color: var(--color-light);
  background-color: var(--color-dark);
}


///////////////////////////////////
// Responsive utilities
///////////////////////////////////

// Container
// Use this to give wrappers a sensible maximum width and some lateral breathing space.
// Defined as a mixin so it can be used in different places; not just via the .container class defined later.

@mixin container() {

  margin-left: $space-s;
  margin-right: $space-s;

  @include at-least($bp-wide-two) {
    margin-left: 2%;
    margin-right: 2%;
  }

  @include at-least($bp-wide-three) {
    margin-left: 6%;
    margin-right: 6%;
  }

  @include at-least($bp-wide-four) {
    //margin-left: 10%;
    //margin-right: 10%;

    margin-left: auto;
    margin-right: auto;
    max-width: 70vw; // change as required based on the maximum width you want your content to go.
  }

  @include at-least($bp-wide-five) {
    margin-left: auto;
    margin-right: auto;
  }
}

.container {
  @include container();
}


// Container (centred inner content e.g. a centred column)
// A container which centres its content based on the max-width of that content.
// By using flexbox centring, there is no need for a max-width on this parent which makes it more flexible.
// Flex-direction is column so that subsequent sibling elements don’t align horizontally.

@mixin container-centred-content() {
  margin-left: $space-s;
  margin-right: $space-s;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.container-centred-content {
  @include container-centred-content();
}


// Container (centred content and centred text within)

.container-centred-content-centred-text {
  @include container-centred-content();
  & > * {
    text-align: center;
    max-width: $text-measure-max-in-ems+rem;
  }
}



// Create a grid with 3 flexible-width-but-always-equal-width colummns
// (and auto-rows? - test to confirm)

@mixin trio() {
  display: grid;
  grid-column-gap: $space-l;
  grid-template-columns: repeat(3, 1fr);
}

.trio {
  //--flow-space: #{$body-line-height-min}rem;
  @include stack-recursive();

  @include at-least($bp-wide-one) {
    @include trio();

    & > * {
      margin-top: 0;
    }

    section {
      --flow-space: #{$flow-space-compact}rem;
    }
  }
}



// Create a row with 2 equal-width columns (using multi-column) but when space allows, 3 equal-width columns.

.min-duo-max-trio {
  columns: 2;
  @include at-least($bp-wide-one) {
    columns: unset;
    @include trio();
  }
}


// Component lists of flexible/unknown quantity with equal width items.
// To achieve wrapping, we can use the auto-fit or auto-fill keywords.
// auto-fill inserts empty columns to end of line if necessary
// auto-fit also inserts empty columns but collapses them so they don’t take up space then allocates their space to the items.
// See https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/




// Create a grid that shows two across on narrow screens
// but on wider screens, auto-fits columns and rows (inserts empty columns to end of line if necessary)
// and never lets items get too wide, by virtue of using a vw-based column-gap
// Ref: https://www.sarasoueidan.com/work/
// Note: should test/decide whether grid or flexbox is best here

.flexible-list-component {
  list-style: none;
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 15vw;
}

@media (min-width: 50em) {
  .flexible-list-component {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    grid-gap: 7em 7vw;

    & > * {
      //outline: 1px solid red;
    }
  }

}



// A flexible grid suited to items that can be narrow.
// It increases the minimum width of items beyond a breakpoint.

.another-flexible-list-component {
    list-style: none;
    padding: 0;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    grid-gap: 3em;
}

@media (min-width: 56.25em) {
  .another-flexible-list-component {
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  }
}
