// Useful layout refs:
// Grid: https://css-tricks.com/snippets/css/complete-guide-grid/, http://grid.malven.co/, https://cssgrid-generator.netlify.com/



///////////////////////////////////
// Box
///////////////////////////////////

// Purpose: create a "visible box" which groups and demarcates some content.
// Example use cases: i) a note/message to stand out among flow content; or ii) a card in a grid; or iii) inside a positioned alert.
// It should have:
// i) padding on all sides or none at all; and or
// ii) border on all sides or none at all; and or
// iii) a background colour with contrasting text colour. If there’s no border, add a transparent outline because high-contrast themes eliminate backgrounds.
// Ref: https://absolutely.every-layout.dev/layouts/box/

// Temp til decide where to put this var
:root {
  --border-thin: 1px;
}

.box {
  padding: $space-s;
  border: var(--border-thin) solid;
  --color-light: #eee;
  --color-dark: #222;
  background-color: var(--color-light);
  color: var(--color-dark);
}

.box.box-no-padding {
  padding: 0;
}

.box.box-no-border {
  border: none;
  outline: 0.125rem solid transparent;
  outline-offset: -0.125rem;
}

.box * {
  color: inherit;
}

.box.invert {
  color: var(--color-light);
  background-color: var(--color-dark);
}



///////////////////////////////////
// Centre
///////////////////////////////////

// Purpose: horizontal centring (as a composable unit)
// Create a horizontally centered column, capping its width at a reasonable measure.
// Optionally include gutter so that in narrower contexts the centred column is not cramped flush against its parent’s sides.
// Set box-sizing such that any included gutter does not make the element’s width narrower.

.centre {
  box-sizing: content-box;
  margin-left: auto;
  margin-right: auto;
  max-width: $text-measure-max-in-ems+rem;
  padding-left: $space-s;
  padding-right: $space-s;
}

.centre.centre-no-gutter {
  padding-left: 0;
  padding-right: 0;
}

.centre.centre-with-centred-text {
  text-align: center;
}

// .centre-intrinsic
// Purpose: builds on .centre to further centre elements based on their natural, content-based widths.
// Useful for naturally small elements like buttons, or elements with their own max-width set under our max. measure.

.centre.centre-intrinsic {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding-left: 0;
  padding-right: 0;
}



///////////////////////////////////
// Cover
///////////////////////////////////

// Purpose: vertical centring (as a composable unit) that also handles optional header and footer elements.
// Default is to "cover" entire viewport height, however could customise by changing the min-height.
// Requires a centred element, but can also handle one element above and/or one below (e.g. a close button at top right; a “read more” at bottom.
// Use cases: i) full viewport height "book covers"; or ii) a full height “above the fold” header preeceding more content;
// Ref: https://absolutely.every-layout.dev/layouts/cover/#the-generator

.cover {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  padding: 1rem;
}

.cover.cover-no-padding {
  padding: 0;
}

.cover > * {
  margin-top: 1rem;
  margin-bottom: 1rem;
}

.cover > :first-child:not(.centred) {
  margin-top: 0;
}

.cover > :last-child:not(.centred) {
  margin-bottom: 0;
}

.cover > .centred {
  margin-top: auto;
  margin-bottom: auto;
}



///////////////////////////////////
// Scroll-Track
///////////////////////////////////

// Purpose: horizontally aligns its inner items even in narrow contexts, using overflow and horizontal scrolling (rather than vertical stacking) when required.
// Notes: tell flex items not to shrink; we’re intentionally letting them overflow rather than trying to squeeze them in.
// Potential Use Cases: i) an image gallery; ii) navigation
// Ref: https://andy-bell.design/wrote/progressive-overflow-management-with-a-scroll-track-utility/

.scroll-track {
  display: flex;
  max-width: 100%;
  overflow-x: auto;
  overflow-y: hidden;
  -webkit-overflow-scrolling: touch;
}

.scroll-track > * {
  flex-shrink: 0;
}

// Make it centre-able. All that is needed is for the parent to use text-align: center;. Alternatively could avoid this class and just place inside a .centre.

.scroll-track-intrinsic {
  display: inline-flex;
}





